import asyncio
import logging
import re
import sqlite3
import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class ReminderDB:
    def __init__(self, db_name='reminders.db'):
        self.db_name = db_name
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY,
            user_id INTEGER NOT NULL,
            reminder_text TEXT NOT NULL,
            reminder_time TIMESTAMP NOT NULL,
            is_sent BOOLEAN DEFAULT 0
        )
        ''')
        conn.commit()
        conn.close()
    
    def add_reminder(self, user_id, reminder_text, reminder_time):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO reminders (user_id, reminder_text, reminder_time) VALUES (?, ?, ?)',
            (user_id, reminder_text, reminder_time)
        )
        reminder_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return reminder_id
    
    def get_active_reminders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT id, user_id, reminder_text, reminder_time FROM reminders WHERE is_sent = 0'
        )
        reminders = cursor.fetchall()
        conn.close()
        return reminders
    
    def get_user_reminders(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT id, reminder_text, reminder_time FROM reminders WHERE user_id = ? AND is_sent = 0 ORDER BY reminder_time',
            (user_id,)
        )
        reminders = cursor.fetchall()
        conn.close()
        return reminders
    
    def mark_reminder_as_sent(self, reminder_id):
        """–û—Ç–º–µ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE reminders SET is_sent = 1 WHERE id = ?',
            (reminder_id,)
        )
        conn.commit()
        conn.close()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = ReminderDB()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def parse_reminder(text):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - —á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/—á–∞—Å–∞/—á–∞—Å
    - —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/–º–∏–Ω—É—Ç—ã/–º–∏–Ω—É—Ç—É
    - —á–µ—Ä–µ–∑ X —Å–µ–∫—É–Ω–¥/—Å–µ–∫—É–Ω–¥—ã/—Å–µ–∫—É–Ω–¥—É
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_patterns = [
        (r'—á–µ—Ä–µ–∑ (\d+)\s+—á–∞—Å(–æ–≤|–∞|)?', 'hours'),
        (r'—á–µ—Ä–µ–∑ (\d+)\s+–º–∏–Ω—É—Ç(—É|—ã|)?', 'minutes'),
        (r'—á–µ—Ä–µ–∑ (\d+)\s+—Å–µ–∫—É–Ω–¥(—É|—ã|)?', 'seconds'),
    ]
    
    reminder_text = text
    reminder_time = None
    
    # –ò—â–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
    for pattern, time_unit in time_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏
            amount = int(match.group(1))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if time_unit == 'hours':
                delta = datetime.timedelta(hours=amount)
            elif time_unit == 'minutes':
                delta = datetime.timedelta(minutes=amount)
            else:  # seconds
                delta = datetime.timedelta(seconds=amount)
            
            reminder_time = datetime.datetime.now() + delta
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_text = re.sub(pattern, '', text, flags=re.IGNORECASE).strip()
            break
    
    if reminder_time:
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
        reminder_text = re.sub(r'^–Ω–∞–ø–æ–º–Ω–∏\s*', '', reminder_text, flags=re.IGNORECASE).strip()
        reminder_text = re.sub(r'^–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s*', '', reminder_text, flags=re.IGNORECASE).strip()
        reminder_text = re.sub(r'^\s*:\s*', '', reminder_text).strip()
        
        return reminder_text, reminder_time
    
    return None, None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å\n"
        "- –ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç: –≤—ã–ø–∏—Ç—å –≤–æ–¥—É\n"
        "- –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤–≤–µ–¥–∏ /list"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@router.message(Command("list"))
async def cmd_list(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = message.from_user.id
    reminders = db.get_user_reminders(user_id)
    
    if not reminders:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    response = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for i, reminder in enumerate(reminders, 1):
        reminder_id, reminder_text, reminder_time_str = reminder
        try:
            reminder_time = datetime.datetime.strptime(reminder_time_str, "%Y-%m-%d %H:%M:%S")
            time_str = reminder_time.strftime("%d.%m.%Y %H:%M")
            response += f"{i}. {reminder_text} - {time_str}\n"
        except ValueError:
            response += f"{i}. {reminder_text} - –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
    
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
@router.message(F.text)
async def handle_reminder(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    text = message.text
    user_id = message.from_user.id
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_text, reminder_time = parse_reminder(text)
    
    if reminder_text and reminder_time:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        reminder_id = db.add_reminder(user_id, reminder_text, reminder_time.strftime("%Y-%m-%d %H:%M:%S"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        time_str = reminder_time.strftime("%d.%m.%Y %H:%M")
        await message.answer(f"‚úÖ –•–æ—Ä–æ—à–æ! –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º:\n\n¬´{reminder_text}¬ª\n\n–í—Ä–µ–º—è: {time_str}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        asyncio.create_task(send_reminder_at_time(reminder_id, user_id, reminder_text, reminder_time))
    else:
        await message.answer(
            "‚ùì –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "- —á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤\n"
            "- —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç\n"
            "- —á–µ—Ä–µ–∑ X —Å–µ–∫—É–Ω–¥\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å"
        )

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
async def send_reminder_at_time(reminder_id, user_id, reminder_text, reminder_time):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
    now = datetime.datetime.now()
    wait_time = (reminder_time - now).total_seconds()
    
    if wait_time > 0:
        try:
            await asyncio.sleep(wait_time)
            await bot.send_message(user_id, f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: {reminder_text}")
            db.mark_reminder_as_sent(reminder_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    else:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        try:
            await bot.send_message(user_id, f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï (–∑–∞–¥–µ—Ä–∂–∞–Ω–æ): {reminder_text}")
            db.mark_reminder_as_sent(reminder_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def restore_reminders():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logging.info("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    reminders = db.get_active_reminders()
    count = 0
    
    for reminder in reminders:
        reminder_id, user_id, reminder_text, reminder_time_str = reminder
        try:
            reminder_time = datetime.datetime.strptime(reminder_time_str, "%Y-%m-%d %H:%M:%S")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            now = datetime.datetime.now()
            if reminder_time > now:
                # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                asyncio.create_task(send_reminder_at_time(reminder_id, user_id, reminder_text, reminder_time))
                count += 1
            else:
                # –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–∑—É —Å –ø–æ–º–µ—Ç–∫–æ–π –æ –∑–∞–¥–µ—Ä–∂–∫–µ
                delay = now - reminder_time
                delay_minutes = delay.total_seconds() // 60
                
                message = f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï (–ø—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞ {int(delay_minutes)} –º–∏–Ω): {reminder_text}"
                await bot.send_message(user_id, message)
                db.mark_reminder_as_sent(reminder_id)
                count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç...")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await restore_reminders()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())